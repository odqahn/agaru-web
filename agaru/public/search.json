[{"categories":null,"content":"Azure DevOps et VMSS agents Bonne nouvelle, Azure DevOps permets maintenant d’utiliser des scale set pour les agents. Cela va apporter très facilement plus de flexibilités que les self hosted et nous permettre de faire des montages assez sympas.\nDans cette série de post nous allons :\n Voir en quoi un VMSS va nous apporter des choses (use cases) Créer un VMSS et le lier à Azure DevOps Explorer les différentes options Créer une image custo avec Docker pour pouvoir builder nos petits Dockerfiles Explorer le git des agents de build de Microsoft et builder l’image des self hosted pour notre VMSS Aborder quelques points de sécurité et faire un peu de custo avancée avec ces images  Commençons directement !\nPourquoi les VMSS, c’est cool? Ressources privées A moins d’être une start up ou d’avoir foncé dans le cloud, votre infra est certainement composée d’un mélange de pleins de choses. On va y retrouver des VM, dans des VNet, des ressources publiques mais aussi des ressources privées. Depuis quelques temps, Azure propose de privatiser pas mal de ressources grâce aux private endpoint par exemple.\nCe sont ces ressources privées et isolée d’internet qui nous intéressent. Pour l’instant, contacter celles-ci nécessitaient de devoir créer un agent self hosted en créant un VM, en installant un agent. Il fallait ensuite monitorer celui-ci, le maintenir etc.\nGrâce au VMSS, on va disposer d’un potentiel élastique pour faire tourner nos pipelines et pouvoir rassembler le meilleur des deux mondes : des images construites dynamiquement dans une infra privée. Un seul pool d’agent qui va pouvoir builder du code sans devoir faire la maintenance de tous les framework, vous offrir la possibilité de réaliser des tests d’intégration directement sur votre non prod, de faire des releases sur des IIS internes,…\nLe cout A noter aussi, dans un VMSS, vous ne payez que l’uptime de vos VMs (et un peu de stockage, de traffic,… mais c’est surtout l’utime). Grâce au VMSS et à l’intégration dans DevOps, on va pouvoir jouer là-dessus pour ne payer que ce qu’on utilise réellement, et pas pour 10 agents self hosted dispo 24/24 7/7 ou une VM qui doit tourner tout le temps.\nIci, c’est DevOps qui va piloter le scale set et provisionner des agents quand un build est lancé. On pourra lui donner quelques règles comme la possibilité de garder des agents en stand by ou l’idle time avant de tuer une instance par exemple. Nous explorerons les possibilités lors de la configuration.\nCusto! Les selfs hosted ne sont pas facilement customisable. Bien sûr, vous pouvez ajouter des outils dans vos pipeline via une commande PowerShell ou bash mais cela représente un cout de temps, qui, pour certains outils, peut être assez long.\nVous aimeriez peut-être que l’agent Ubuntu 20.04 utilise java 8 plutôt que java 11 par défaut? C’est possible (et ça sera d’ailleurs ce qu’on fera dans le dernier post).\nLa suite? Prochain post, création du VMSS et configuration dans DevOps avec une petite application d’exemple!\n","description":"","tags":null,"title":"Azure Devops \u0026 VMSS - part1","uri":"/posts/azure-devops-vmss-p1/"},{"categories":null,"content":"Bienvenu chez moi! Pour mon premier post, parlons de l’hébergement de ce site.\nIntro Les outils utilisés sont:\n Hugo Azure Statis Web Apps Github VScode Markdown  Hugo permets de générer un site statique sur base de configurations et de fichiers Markdown. L’avantage de ce système est d’avoir besoin de très peu de ressources pour servir le site, il n’y aura que très peu (voir pas) de calcul à faire, autant du côté serveur que du côté client.\nConcernant Markdown, il s’agit d’un language balisé plutôt simple à utiliser. Il a pour but de fournir un document facile à lire et à interpréter et transformable en html, pdf,… C’est ce language qui est utilisé traditionnellement dans les repos git pour composer le fichier README.md (et tout autre doc faisant partie du source control).\nHugo Hugo est assez simple à installer: https://gohugo.io/getting-started/installing\nUne fois en place, il vous suffira de créer un nouveau site à l’aide de votre terminal préféré: hugo new site newsite.\nPour l’utilisation basique de Hugo, je vous renvoi au tuto quick start du projet.\nAzure Concernant l’hébergement, j’utilise une web app dans Azure spécialement créée pour du contenu static. Innutile de payer pour le support de framework innutilisés comme le php, .net ou autre, il n’y aura ici que de l’htlm et un peu de javascript.\nCette technologie est actuellement en preview et gratuite. Il suffit d’avoir un abonnement Azure pour se lancer.\nLa configuration de cet artefact est super simple. On pourra lui ajouter un domaine custo (ici agaru.be) en suivant l’assistant. Le certificat https sera automatiquement ajouté.\nUne fois en place, vous pouvez déposer des fichiers htlm ou mieux… Automatiser le déploiement!\nGit workflow \u0026 deploy Mon code est hébergé dans github, ce qui va me permettre d’automatiser la publication des nouvelles versions. Contrairement à un site web dynamique comme on à l’habitude d’en croiser (Wordpress, Drupal,…), chaque mise à jour du contenu va m’obliger à publier le site. Et comme chaque action manuelle, cela peut vite devenir redondant.\nSur les principes d’automatisations, qu’on peut retrouver dans la philosphie devops par exemple, j’ai utilisé workflow github afin de pousser automatiquement mon code dans l’app service.\nPour se faire, après avoir créé mon repo dans github, il me suffit de me connecter à mon compte github pendant la création de mon app service: Après avoir choisi son organisation, le repo et la branche, Azure va automatiquement ajouter un dossier .github contenant votre workflow dans le source control.\nIl ne reste maintenant qu’à générer vos pages avec la CLI de hugo (voir le tuto quick start), commiter et pusher vos changements. Tout sera déployé automatiquement sur votre site quelques minutes plus tard.\n","description":"","tags":null,"title":"Hosting","uri":"/posts/hosting/"}]
